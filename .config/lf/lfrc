# -- basic -- #
set shell zsh
set shellopts '-euy'
set ifs "\n"
set scrolloff 10
set icons
set scrolloff 10
set period 1
set hiddenfiles ".*:*.aux:*.log:*.run.xml"
set number on
set drawbox
# set nopreview
# set ratios 1
set info size:time



# -- keybinds -- #

map <enter> shell 		# use enter for shell cmds
map se				# override this

# basic operations
map D delete
map C copyto
map M moveto
#map M %mv -i -- $fs .

map z $$READER "$f"
map b $$BROWSER "$f"
map e $$EDITOR "$f"
map x $$f		        # execute
map HI set hidden!		# toggle hidden files on/off

# movement
map gA cd ~/area
map gM cd ~/area/muz
map gI cd ~/area/pix
map gP cd ~/proj
map gR cd ~/res
map gH cd ~/arh
map gC cd ~/.config
map gL cd ~/.local
map gS cd ~/.local/bin
map gls cd ~/.local/share
map gcac cd ~/.cache
map gO cd /opt
map gmn cd /mnt

# custom
map setb $setbg.sh $f		# set bg
map . vimtree
map <c-n> push :mkdir<space>
map <c-m> newfold

# TODO:
#map enc encrypt
#map dec decrypt



# -- commands -- #

# open your current path in vim w NerdTree
cmd vimtree $nvim .

# setbg cmd
cmd setbg.sh "$1"

# make directory
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# defines the moveto cmd
cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	# FIXME: Maybe stop being an ape and find a better way to do that dest extraction
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/dirnav | fzf | sed 's|~|$HOME|' | cut -d' ' -f2- | xargs)" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest/\"
	done &&
	dunstify -a "lf" -u "low" "ðŸšš File(s) moved to $dest."
}}

# defines the delete cmd
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

# create a new folder with 
# the selected items
cmd newfold ${{
    set -f
    read newd
	dunstify -a lf "$newd"
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}


# define a custom 'open' command
# This command is called when current file is not a directory
# Will handle: pdfs, images, audio/video files, 
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        image/svg+xml) display -- $f ;;
        image/*) sxiv $fx;;
        audio/*) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
